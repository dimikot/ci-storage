#!/usr/bin/python3 -u
from __future__ import annotations
import argparse
import collections
import dataclasses
import glob
import hashlib
import os.path
import re
import shlex
import subprocess
import sys
import tempfile
import textwrap
import time
import typing

STORAGE_MAX_AGE_SEC_DEFAULT = 3600
STORAGE_MAX_AGE_SEC_BAK = 60
STORAGE_KEEP_HINT_SLOTS_DEFAULT = 5
STORAGE_DIR_DEFAULT = "~/ci-storage"
META_FILE = ".ci-storage.meta"
EMPTY_DIR = ".ci-storage.empty-dir"
TEMP_DIR = "/tmp" if os.access("/tmp", os.W_OK) else tempfile.gettempdir()
MAX_FULL_SNAPSHOT_HISTORY = 10


#
# Tool entry point.
#
def main():
    parser = argparse.ArgumentParser(
        description="""
            Quickly stores the content of some local directory in the storage
            with the provided slot id on a remote host, or loads the content
            from the storage to that directory. The tool makes some smart
            differential optimizations along the way to operate as fast as
            possible (typically, 4 seconds for a 1.5G directory with 200K files
            in it on Linux EXT4).

            Under the hood, the tool uses rsync. When storing to the remote
            storage, it uses rsync's "--link-dest" mode pointing to the most
            recently created slot, to reuse as many existing files in the
            storage as possible (hoping that almost all files to be stored in
            the current slot are the same as the files in the recent slot, which
            is often times true for e.g. node_modules directories). If a slot
            with the same id already exists, it is overwritten in a
            transaction-safe fashion.

            When loading the files from a remote storage slot to a local
            directory, implies that the local directory already contains almost
            all files equal to the remote ones, so rsync can run efficiently.
        """,
        formatter_class=ParagraphFormatter,
    )
    parser.add_argument(
        "action",
        type=str,
        choices=["store", "load"],
        help="Action to run.",
    )
    parser.add_argument(
        "--storage-host",
        type=str,
        required=False,
        help="Storage host in the format [user@]host[:port]. It must allow password-free SSH key based access. If omitted, uses the local filesystem (no SSH).",
    )
    parser.add_argument(
        "--storage-dir",
        type=str,
        default=STORAGE_DIR_DEFAULT,
        required=False,
        help=f"Storage directory path on the storage host (will be created if it does not exist).",
    )
    parser.add_argument(
        "--storage-max-age-sec",
        type=str,
        default=str(STORAGE_MAX_AGE_SEC_DEFAULT),
        required=False,
        help="Remove slots created earlier than this many seconds ago. The exception is the newest slot (it's always kept), and also up to --storage-keep-hint-slots slots related to unique hints.",
    )
    parser.add_argument(
        "--storage-keep-hint-slots",
        type=str,
        default=str(STORAGE_KEEP_HINT_SLOTS_DEFAULT),
        required=False,
        help="Defines the number of unique hints, for which ci-storage will keep at least one newest slot, even if is past --storage-max-age-sec.",
    )
    parser.add_argument(
        "--slot-id",
        type=str,
        required=True,
        default=[],
        action="append",
        help='Id of the slot to store to or load from. Use "*" to load a smart-random slot (e.g. most recent or best in terms of layer compatibility) and skip if it does not exist. When loading, you may provide multiple --slot-id options to try loading them in order.',
    )
    parser.add_argument(
        "--local-dir",
        type=str,
        required=True,
        help="Local directory path.",
    )
    parser.add_argument(
        "--hint",
        type=str,
        default=[],
        action="append",
        help='Optional hints of the CI run to let slot-id="*" specifier find the best slot in the storage to load from. The leftmost matching hints have higher priority. If a line in multi-line hint starts with "@", then it expands to a digest of the content of all files matching the space-separated list of patterns on the same line after the "@". On "store" action, if --hint is not provided, the hints are derived from the previous "load" action.',
    )
    parser.add_argument(
        "--exclude",
        type=str,
        default=[],
        action="append",
        help="Exclude pattern(s) for rsync.",
    )
    parser.add_argument(
        "--layer",
        type=str,
        default=[],
        action="append",
        help="Include pattern(s) for rsync. If set, only the matching files will be transferred. Empty directories will be ignored. Deletion will be turned off on load.",
    )
    parser.add_argument(
        "--verbose",
        default=False,
        action="store_true",
        help="If set, prints the list of transferred files.",
    )
    args = parser.parse_intermixed_args()

    action: typing.Literal["store", "load"] = args.action
    storage_host: str | None = args.storage_host or None
    storage_dir: str = (
        re.sub(r"/+$", "", args.storage_dir)
        if args.storage_dir
        else STORAGE_DIR_DEFAULT
    )
    storage_max_age_sec: int = int(
        args.storage_max_age_sec or str(STORAGE_MAX_AGE_SEC_DEFAULT)
    )
    storage_keep_hint_slots: int = int(
        args.storage_keep_hint_slots or str(STORAGE_KEEP_HINT_SLOTS_DEFAULT)
    )
    slot_ids: list[str] = " ".join(args.slot_id).split()
    local_dir: str = re.sub(r"/+$", "", args.local_dir)
    hints: list[str] = [
        hint
        for arg in "\n".join(args.hint).splitlines()
        if arg.strip()
        for hint in expand_hint_arg(arg=arg.strip())
    ]
    exclude: list[str] = [
        line for line in "\n".join(args.exclude).splitlines() if line.strip()
    ]
    layer: list[str] = [
        line for line in "\n".join(args.layer).splitlines() if line.strip()
    ]
    verbose: bool = args.verbose

    if storage_host:
        # Rsync doesn't expand "~" in the remote path when syncing to a remote
        # host, but it is anyways relative to the remote user's home directory,
        # so we just remove "~".
        storage_dir = re.sub(r"^~/*", "", storage_dir) or "."
    else:
        # When syncing to the current filesystem, expand "~" manually, since
        # rsync doesn't do it.
        storage_dir = os.path.expanduser(storage_dir)

    if action == "store":
        if len(slot_ids) != 1:
            parser.error(f"for {action} action, exactly one --slot-id is required")
        action_store(
            storage_host=storage_host,
            storage_dir=storage_dir,
            storage_max_age_sec=storage_max_age_sec,
            slot_id=slot_ids[0],
            local_dir=local_dir,
            hints=hints,
            exclude=exclude,
            layer=layer,
            verbose=verbose,
        )
        action_maintenance(
            storage_host=storage_host,
            storage_dir=storage_dir,
            storage_max_age_sec=storage_max_age_sec,
            storage_keep_hint_slots=storage_keep_hint_slots,
        )
    elif action == "load":
        if not slot_ids:
            parser.error(f"for {action} action, one or many --slot-id is required")
        action_load(
            storage_host=storage_host,
            storage_dir=storage_dir,
            storage_max_age_sec=storage_max_age_sec,
            slot_ids=slot_ids,
            local_dir=local_dir,
            hints=hints,
            exclude=exclude,
            layer=layer,
            verbose=verbose,
        )


#
# Loads the content from the storage to the local directory.
#
# Multiple slot ids may be passed; in this case, they are checked in order, and
# the 1st slot existing in the storage is loaded.
#
# One of the slot ids may be "*", which means that we need to load "some good
# enough" slot from the storage:
# - If we are loading a layer, then we try to use the slot id which "best
#   matches" the full (non-layer) snapshot loaded in the past.
# - If we are loading a full snapshot, then first try to use the slot which has
#   the largest number of the common hints with the passed hints list (leftmost
#   hints elements have higher priority). In worst case, just use the most
#   recent slot in the storage.
#
def action_load(
    *,
    storage_host: str | None,
    storage_dir: str,
    storage_max_age_sec: int,
    slot_ids: list[str],
    local_dir: str,
    hints: list[str],
    exclude: list[str],
    layer: list[str],
    verbose: bool,
):
    os.makedirs(local_dir, exist_ok=True)

    slot_infos = list_slots(
        storage_host=storage_host,
        storage_dir=storage_dir,
        storage_max_age_sec=storage_max_age_sec,
    )

    storage = "layer storage" if layer else "storage"
    slot_id: str | None = None
    for id in map(normalize_slot_id, slot_ids):
        prefix = f'Checking slot-id="{id}"...'
        if id == "*":
            if not slot_infos:
                if layer:
                    print(f"{prefix} {storage} has no slots, so exiting with a no-op")
                else:
                    print(f"{prefix} {storage} has no slots, so cleaning {local_dir}")
                    action_clean(
                        local_dir=local_dir,
                        exclude=exclude,
                        verbose=verbose,
                    )
                    # Write hints, so next time we call "store" action, we don't
                    # have to pass them again, the hints will be derived from
                    # the "load" action.
                    if hints:
                        meta = SlotMeta.read_from(local_dir=local_dir)
                        meta.hints = hints
                        meta.write_to(local_dir=local_dir)
                return
            elif not layer:
                slot_id = infer_best_slot_to_load_full_from(
                    prefix=prefix,
                    slot_infos=list(slot_infos.values()),
                    hints=hints,
                )
                break
            elif layer:
                slot_id = infer_best_slot_to_load_layer_from(
                    prefix=prefix,
                    slot_infos=list(slot_infos.values()),
                    full_snapshot_history=SlotMeta.read_from(
                        local_dir=local_dir
                    ).full_snapshot_history,
                )
                break
        elif id in slot_infos:
            slot_id = id
            print(f"{prefix} found in the {storage}, using it")
            break
        else:
            print(f"{prefix} not found in the {storage}")

    if not slot_id:
        raise UserException(
            f"none of the provided slot id(s) were found in the {storage}, aborting. "
            + "Most likely, the slot got evicted. "
            + 'You may need to click "Re-run all jobs" button (and not just "Re-run failed jobs").'
        )

    host, port = parse_host_port(storage_host)
    check_call(
        cmd=[
            "rsync",
            *build_rsync_args(
                host=host,
                port=port,
                action="load",
                exclude=exclude,
                layer=layer,
                verbose=verbose,
            ),
            (f"{host}:" if host else "") + f"{storage_dir}/{slot_id}/",
            f"{local_dir}/",
        ],
        print_elapsed=True,
    )

    if not layer:
        slot_info = slot_infos[slot_id]
        # We update full_snapshot_history to remember the actual slot "*" we
        # have just loaded from, to allow the next "store" action better choose
        # the "dedupping" slot with --link-dest.
        slot_info.meta.full_snapshot_history.insert(0, slot_id)
        # Write hints, so next time we call "store" action, we don't have to
        # pass them again, the hints will be derived from the "load" action.
        if hints:
            slot_info.meta.hints = hints
        slot_info.meta.write_to(local_dir=local_dir)


#
# Stores the content of the local directory in the storage with the provided
# slot id on a remote host.
#
def action_store(
    *,
    storage_host: str | None,
    storage_dir: str,
    storage_max_age_sec: int,
    slot_id: str,
    local_dir: str,
    hints: list[str],
    exclude: list[str],
    layer: list[str],
    verbose: bool,
):
    slot_id = normalize_slot_id(slot_id)
    if slot_id == "*":
        raise UserException(f'slot-id="{slot_id}" is not allowed for "store" action')

    if not hints:
        hints = SlotMeta.read_from(local_dir=local_dir).hints

    meta = None
    slot_id_we_used_to_load_from = None
    if not layer:
        meta = SlotMeta.read_from(local_dir=local_dir)
        if meta and meta.full_snapshot_history:
            slot_id_we_used_to_load_from = meta.full_snapshot_history[0]

    slot_infos = list_slots(
        storage_host=storage_host,
        storage_dir=storage_dir,
        storage_max_age_sec=storage_max_age_sec,
    )

    slot_recent = None
    if slot_id_we_used_to_load_from in slot_infos:
        slot_recent = slot_infos[slot_id_we_used_to_load_from]
    elif slot_infos:
        slot_recent = list(slot_infos.values())[0]

    slot_id_tmp = f"{slot_id}.tmp.{int(time.time())}"
    host, port = parse_host_port(storage_host)
    check_call(
        cmd=[
            "rsync",
            "--inplace",
            *([f"--link-dest=../{slot_recent.id}/"] if slot_recent else []),
            *build_rsync_args(
                host=host,
                port=port,
                action="store",
                exclude=exclude,
                layer=layer,
                verbose=verbose,
            ),
            f"{local_dir}/",
            (f"{host}:" if host else "") + f"{storage_dir}/{slot_id_tmp}/",
        ],
        print_elapsed=True,
    )

    if meta:
        meta.full_snapshot_history.insert(0, slot_id)
        meta.hints = hints
        meta.write_to(local_dir=local_dir)

    print(
        check_output_script(
            host=storage_host,
            script=SCRIPTS["COMMIT_SLOT"],
            args=[
                storage_dir,
                slot_id_tmp,
                slot_id,
                meta.serialize() if meta else "",
            ],
            indent=True,
        ),
        end="",
    )


#
# Removes everything in local_dir. We use rsync and not rm to keep the excludes
# intact and compatible with the "load" action.
#
def action_clean(
    *,
    local_dir: str,
    exclude: list[str],
    verbose: bool,
):
    empty_dir = f"{TEMP_DIR}/{EMPTY_DIR}.{normalize_slot_id(local_dir)}"
    os.makedirs(empty_dir, exist_ok=True)
    try:
        check_call(
            cmd=[
                "rsync",
                *build_rsync_args(
                    host=None,
                    port=None,
                    action="load",
                    exclude=exclude,
                    layer=[],
                    verbose=verbose,
                ),
                f"{empty_dir}/",
                f"{local_dir}/",
            ],
            print_elapsed=True,
        )
        SlotMeta().write_to(local_dir=local_dir)
    finally:
        try:
            os.rmdir(empty_dir)
        except Exception:
            pass


#
# Runs the maintenance script for the storage.
#
def action_maintenance(
    *,
    storage_host: str | None,
    storage_dir: str,
    storage_max_age_sec: int,
    storage_keep_hint_slots: int,
):
    print(
        check_output_script(
            host=storage_host,
            script=SCRIPTS["MAINTENANCE"],
            args=[storage_dir, str(storage_max_age_sec), str(storage_keep_hint_slots)],
            indent=True,
        ),
        end="",
    )


#
# Given the list of slots in the storage, returns the one which we want the load
# action with slot-id="*" to match.
#
def infer_best_slot_to_load_full_from(
    *,
    prefix: str,
    slot_infos: list[SlotInfo],
    hints: list[str],
) -> str:
    if not hints:
        id = slot_infos[0].id
        print(f'{prefix} loading the most recent full (non-layer) slot-id="{id}"')
        return id

    print(f"{prefix} prioritizing slots matching hints...")
    weights: list[tuple[int, int, str]] = []
    for slot_info in slot_infos:
        weight = ""
        matched_hints: list[str] = []
        for hint in hints:
            if hint in slot_info.meta.hints:
                weight += "1"
                matched_hints.append(hint)
            else:
                weight += "0"
        if matched_hints:
            print(
                f'Checking slot-id="{slot_info.id}" from the storage... weight: {weight}, matched hints: {", ".join(matched_hints)}, age: {slot_info.age_sec} sec'
            )
            weights.append((int(weight), -1 * slot_info.age_sec, slot_info.id))
    weights.sort(reverse=True)
    if weights:
        id = weights[0][2]
        print(f'Winner: slot-id="{id}"; loading it, since it has the highest weight')
        return id
    else:
        id = slot_infos[0].id
        print(
            f'No slots matching hints, so loading the most recent full (non-layer) slot-id="{id}"'
        )
        return id


#
# Given the list of slots in the storage, returns the one which we want the
# layer load action with slot-id="*" to match.
#
def infer_best_slot_to_load_layer_from(
    *,
    prefix: str,
    slot_infos: list[SlotInfo],
    full_snapshot_history: list[str],
) -> str:
    if not full_snapshot_history:
        id = slot_infos[0].id
        print(
            f'{prefix} no past loading history, so using just the most recent layer slot-id="{id}"'
        )
        return id

    print(
        f"{prefix} prioritizing layer slots mentioned in the past full snapshot loading history..."
    )
    slot_info_ids = set(slot_info.id for slot_info in slot_infos)
    for id in full_snapshot_history:
        if id in slot_info_ids:
            print(
                f'Checking slot-id="{id}" from history... found in the layer storage, using it'
            )
            return id
        else:
            print(
                f'Checking slot-id="{id}" from history... not found in the layer storage'
            )

    id = slot_infos[0].id
    print(
        f'No slots from past full snapshot loading history were found in the layer storage, so using just the most recent slot-id="{id}"'
    )
    return id


#
# Returns the list of existing slot ids and their ages in seconds, sorted by age
# (i.e. most recently created slots on top of the list). Also, as a side effect,
# touches the newest slot directory on the server (assuming it'll be accessed),
# so it will unlikely be garbage collected anytime soon. Only the slots which
# are not about to be garbage collected within the next STORAGE_MAX_AGE_SEC_BAK
# will be returned (since returning the older ones is dangerous: they may start
# being deleted right at the moment when we load or store).
#
def list_slots(
    *,
    storage_host: str | None,
    storage_dir: str,
    storage_max_age_sec: int,
) -> collections.OrderedDict[str, SlotInfo]:
    slot_infos = collections.OrderedDict[str, SlotInfo]()
    lines = check_output_script(
        host=storage_host,
        script=SCRIPTS["LIST_SLOTS"],
        args=[storage_dir],
    )
    for line in lines.splitlines():
        match = re.match(r"^(\S+) (\d+) (.*)$", line)
        if match:
            slot_info = SlotInfo(
                id=match.group(1),
                age_sec=int(match.group(2)),
                meta=SlotMeta.deserialize(
                    match.group(3).encode().decode("unicode_escape")
                ),
            )
            if slot_info.age_sec < storage_max_age_sec - STORAGE_MAX_AGE_SEC_BAK:
                slot_infos[slot_info.id] = slot_info
    return slot_infos


#
# Replaces all characters invalid in the file name with underscores.
#
def normalize_slot_id(
    slot_id: str,
) -> str:
    return re.sub(r"[^a-zA-Z0-9_-]", "_", slot_id) if slot_id != "*" else slot_id


#
# Runs an inline script and returns its output. If the call succeeded, but
# produced some stderr, prints it.
#
def check_output_script(
    *,
    host: str | None,
    script: str,
    args: list[str] = [],
    indent: bool = False,
) -> str:
    return check_output(host=host, cmd=["perl", "-we", script, *args], indent=indent)


#
# Runs a command and returns its output. If the call succeeded, but produced
# some stderr, prints it.
#
def check_output(
    *,
    host: str | None,
    cmd: list[str],
    indent: bool = False,
) -> str:
    host, port = parse_host_port(host)
    if host:
        ssh_prefix = [*build_ssh_cmd(port=port), host]
        print(cmd_to_debug_prompt([*ssh_prefix, *cmd]))
        cmd = [*ssh_prefix, shlex.join(cmd)]
    else:
        print(cmd_to_debug_prompt(cmd))
    res = subprocess.run(
        cmd,
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        check=True,
    )
    if res.stderr:
        print(textwrap.indent(res.stderr.rstrip(), "  "))
    return textwrap.indent(res.stdout, "  ") if indent else res.stdout


#
# Runs a command and passes through its output from both stdout and stderr as it
# arrives (without any buffering).
#
def check_call(
    *,
    cmd: list[str],
    print_elapsed: bool = False,
) -> None:
    print(cmd_to_debug_prompt(cmd))
    start_time = time.time()
    with subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
    ) as process:
        while process.stdout:
            line = process.stdout.readline()
            if not line and process.poll() is not None:
                break
            if line.strip():
                print(f"  {line}", end="")
        elapsed = f"  elapsed: {time.time() - start_time:.2f} sec"
        if process.returncode:
            raise subprocess.CalledProcessError(
                process.returncode,
                process.args,
                output="",
                stderr=elapsed,
            )
        elif print_elapsed:
            print(elapsed)


#
# Given a hint argument value, expands it to hints:
# - If the argument starts with "@", then it expands to a digest of the content
#   of all files matching the space-separated list of patterns after the "@".
# - If the argument contains multiple space-separated values, then it treats
#   them as a list of hints.
#
def expand_hint_arg(*, arg: str) -> list[str]:
    if arg.startswith("@"):
        items = arg[1:].strip().split()
        item_patterns = [item for item in items if is_wildcard(item)]
        item_files = [item for item in items if not is_wildcard(item)]
        files = sorted(
            set(
                [
                    *item_files,
                    *[
                        file
                        for pattern in item_patterns
                        for file in glob.glob(pattern, recursive=True)
                    ],
                ]
            )
        )
        print(cmd_to_debug_prompt(["sha256sum", *files]))
        m = hashlib.sha256()
        for file in files:
            try:
                with open(file, "rb") as f:
                    m.update(f.read())
            except OSError as e:
                raise UserException(f"{e.strerror}: {e.filename}")
        hint = "@" + m.hexdigest()[0:16]
        print(f"  {hint}")
        return [hint]
    else:
        return arg.strip().split()


#
# Returns true if the path is a wildcard pattern.
#
def is_wildcard(path: str) -> bool:
    return "*" in path or "?" in path


#
# Converts a command to a debug string like:
# - "$ some command"
# - "% some command" (when the tool is run as root)
#
def cmd_to_debug_prompt(
    cmd: list[str],
) -> str:
    inv = dict((v, k) for k, v in SCRIPTS.items())
    str = re.sub(
        r" '(--[^=]+=)",
        r" \1'",
        shlex.join(
            [
                f"<{inv[arg]}>" if arg in inv else arg.rstrip().replace("\n", "\\n")
                for arg in cmd
            ]
        ),
    )
    prompt = "%" if os.geteuid() == 0 else "$"
    return f"{prompt} {str}"


#
# Parses host:port pair (with port being optional).
#
def parse_host_port(
    host_port: str | None,
) -> tuple[str | None, int | None]:
    if not host_port:
        return None, None
    match = re.match(r"^(.*?)(?::(\d+))?$", host_port)
    if match and match.group(2):
        return match.group(1), int(match.group(2))
    else:
        return host_port, None


#
# Builds ssh command line.
#
def build_ssh_cmd(
    *,
    port: int | None,
) -> list[str]:
    return [
        "ssh",
        "-oStrictHostKeyChecking=no",
        "-oUserKnownHostsFile=/dev/null",
        "-oLogLevel=error",
        *([f"-p{port}"] if port else []),
    ]


#
# Builds some of rsync options.
#
def build_rsync_args(
    *,
    host: str | None,
    port: int | None,
    action: typing.Literal["store", "load"],
    exclude: list[str],
    layer: list[str],
    verbose: bool,
) -> list[str]:
    version_info = check_output(host=None, cmd=["rsync", "--version"])
    version_str = "unknown version"
    version_supports_nanoseconds = False
    match = re.search(r"version\s+([\d.]+)", version_info)
    if match:
        version_str = match.group(1)
        version = tuple(int(v) for v in version_str.split("."))
        version_supports_nanoseconds = version >= (3, 1, 0)
    print(
        f"  {version_str}: "
        + (
            "using nanosecond precision for timestamps"
            if version_supports_nanoseconds
            else "too old; doesn't support nanosecond precision for timestamps; only 1 second accuracy"
        )
    )
    return [
        *(["-e", shlex.join(build_ssh_cmd(port=port))] if host else []),
        "-a",
        "--partial",
        "--stats",
        "--human-readable",
        # Nanosecond precision for mtime comparison if supported. Notice that we
        # don't check the server-side version: if it's older, then we're doomed,
        # all files will be treated as changed likely.
        *(["--modify-window=-1"] if version_supports_nanoseconds else []),
        *([] if layer and action == "load" else ["--delete"]),
        *(["-vv"] if verbose and layer else ["-v"] if verbose else []),
        f"--exclude={META_FILE}",
        *[f"--exclude={pattern}" for pattern in exclude],
        *(
            [
                "--include=*/",
                *[f"--include={pattern}" for pattern in layer],
                "--exclude=*",
            ]
            if layer and layer != ["*"]
            else []
        ),
        *(["--prune-empty-dirs"] if layer and action == "store" else []),
        *(["--rsync-path=rsync --fake-super"] if os.geteuid() == 0 else []),
    ]


#
# Returns unique elements of a list preserving the order.
#
def unique(arr: list[str]) -> list[str]:
    seen: set[str] = set()
    return [x for x in arr if not (x in seen or seen.add(x))]


#
# A helper class for ArgumentParser.
#
class ParagraphFormatter(argparse.HelpFormatter):
    def _fill_text(self, text: str, width: int, indent: str) -> str:
        text = re.sub(r"^ *\n", "", text)
        return "\n\n".join(
            [
                textwrap.indent(textwrap.fill(paragraph, width), indent)
                for paragraph in textwrap.dedent(text).split("\n\n")
            ]
        )


#
# A meta information about some particular full (non-layer) slot. Can serialize
# and deserialize itself to/from a string using an env-like format.
#
# On local machine, the meta file is stored in LOCAL_META_FILE_DIR (which is
# typically "/tmp"), and the name of that file is suffixes with some hash
# derivative of local_dir. This allows to not pollute local_dir with extra files
# that may be not in e.g. .gitignore.
#
@dataclasses.dataclass
class SlotMeta:
    # Each time a dir is loaded from some slot (using "*" or by a concrete slot
    # id), we prepend slot id to this property.
    full_snapshot_history: list[str] = dataclasses.field(default_factory=list[str])
    # Hints related to the content of the slot (e.g. commit hash, SHA of
    # package-lock.json or any other large-content defining file etc.).
    hints: list[str] = dataclasses.field(default_factory=list[str])

    def serialize(self) -> str:
        serialized = ""
        serialized += f"full_snapshot_history={' '.join(unique(self.full_snapshot_history)[0:MAX_FULL_SNAPSHOT_HISTORY])}\n"
        serialized += f"hints={' '.join(unique(self.hints))}\n"
        return serialized

    @staticmethod
    def deserialize(serialized: str) -> SlotMeta:
        self = SlotMeta()
        for line in serialized.splitlines():
            line = line.rstrip()
            match = re.match(r"^([^=]+)=(.*)$", line.rstrip())
            if match:
                key: str = match.group(1).strip()
                value: str = match.group(2).strip()
                if key == "full_snapshot_history":
                    self.full_snapshot_history = unique(value.split())
                elif key == "hints":
                    self.hints = unique(value.split())
        return self

    def write_to(self, *, local_dir: str) -> None:
        with open(self._path(local_dir), "w") as f:
            f.write(self.serialize())

    @classmethod
    def read_from(cls, *, local_dir: str) -> SlotMeta:
        try:
            with open(cls._path(local_dir), "r") as f:
                return SlotMeta.deserialize(f.read())
        except FileNotFoundError:
            return SlotMeta()

    @staticmethod
    def _path(local_dir: str) -> str:
        return f"{TEMP_DIR}/{META_FILE}.{normalize_slot_id(local_dir)}"


#
# An information returned from list_slots().
#
@dataclasses.dataclass
class SlotInfo:
    id: str
    age_sec: int
    meta: SlotMeta


#
# Custom user exceptions.
#
class UserException(Exception):
    pass


#
# A reusable piece injected to SCRIPTS below. Returns all slot directories
# (including temporary, backup etc.) with their associated information. The
# newest slots appear on top of the list.
#
SLOT_INFOS = textwrap.dedent(
    r"""
    sub slot_infos {
        my ($storage_dir) = @_;
        return
            sort {
                $a->{age_sec} <=> $b->{age_sec}
                or
                $b->{slot_id} cmp $a->{slot_id}
            }
            map {
                my $dir = $_;
                $dir =~ s{/+$}{}s;
                my $inode_ctime = (stat($dir))[10];
                if ($inode_ctime) {
                    my $meta = "";
                    if (open(my $fh, "<", "$dir/%(META_FILE)s")) {
                        local $/ = undef;
                        $meta = <$fh>;
                        close($fh);
                    }
                    my $slot_id = $dir;
                    $slot_id =~ s{^.*/}{}s;
                    {
                        slot_id => $slot_id,
                        inode_ctime => $inode_ctime,
                        age_sec => time() - $inode_ctime,
                        dir => $dir,
                        meta => $meta,
                        meta_hints => $meta =~ /^hints=(.*)/m ? [grep(/./s, split(/\s+/s, $1))] : [],
                        is_tmp_or_bak => $slot_id =~ /\./ ? 1 : 0,
                        is_bak => $slot_id =~ /\.bak\.\w*\d+$/s ? 1 : 0,
                    };
                } else {
                    ();
                }
            }
            glob("$storage_dir/*/");
    }
    """.strip()
    % {"META_FILE": META_FILE}
)

#
# Inline scripts to run on the storage host. Reasons to use Perl:
# - It exists and is of the same version everywhere (as opposed to Python).
# - It is fast to boot and doesn't require external modules.
# - It has built-in flock() support.
# - If has native fork() support.
#
SCRIPTS = {
    # The script to list existing non-garbage slot ids, their ages in seconds
    # and meta content (where "\" has a traditional escaping meaning). Most
    # recent slots are on top of the list. It also pre-creates the storage
    # directory, and changes ctime of the most recent slot to the present time
    # (so it will unlikely be garbage collected soon).
    "LIST_SLOTS": textwrap.dedent(
        r"""
        use strict;
        my $storage_dir = $ARGV[0] or die("storage_dir argument required\n");
        length($storage_dir) >= 3 or die("storage_dir is suspiciously short\n");
        if (!-d $storage_dir) {
            system("mkdir", "-p", $storage_dir) == 0 or exit(1);
        }
        %(SLOT_INFOS)s
        my @slot_infos =
            grep { !$_->{is_tmp_or_bak} }
            slot_infos($storage_dir);
        if (@slot_infos) {
            my $newest_dir = $slot_infos[0]{dir};
            my $newest_age_sec = $slot_infos[0]{age_sec};
            my $newest_inode_ctime = $slot_infos[0]{inode_ctime};
            utime(time(), time(), $newest_dir) or die("utime $newest_dir: $!\n");
            foreach (@slot_infos) {
                my $meta_encoded = $_->{meta};
                $meta_encoded =~ s/\\/\\\\/g;
                $meta_encoded =~ s/\r/\\r/g;
                $meta_encoded =~ s/\n/\\n/g;
                print("$_->{slot_id} $_->{age_sec} $meta_encoded\n");
            }
            print STDERR "returned " . scalar(@slot_infos) . " slot(s) and also touched the newest slot $newest_dir (inode_ctime=$newest_inode_ctime, age_sec=$newest_age_sec)\n";
        }
        """.strip()
        % {"SLOT_INFOS": SLOT_INFOS}
    ),
    # The script to rename the new slot directory to the destination one.
    "COMMIT_SLOT": textwrap.dedent(
        r"""
        use strict;
        my $storage_dir = $ARGV[0] or die("storage_dir argument required\n");
        my $slot_id_tmp = $ARGV[1] or die("slot_id_tmp argument required\n");
        my $slot_id_dst = $ARGV[2] or die("slot_id_dst argument required\n");
        my $meta = $ARGV[3];
        length($storage_dir) >= 3 or die("storage_dir is suspiciously short\n");
        defined($meta) or die("meta argument required\n");
        my $slot_dir_tmp = "$storage_dir/$slot_id_tmp";
        my $slot_dir_dst = "$storage_dir/$slot_id_dst";
        my $slot_dir_bak = "$storage_dir/$slot_id_dst.bak." . time();
        my $META_FILE = "$slot_dir_tmp/%(META_FILE)s";
        -d $slot_dir_bak and (system("rm", "-rf", $slot_dir_bak) == 0 or die("rm -rf $slot_dir_bak: $!\n"));
        -d $slot_dir_dst and (system("mv", $slot_dir_dst, $slot_dir_bak) == 0 or die("mv $slot_dir_dst $slot_dir_bak: $!\n"));
        if ($meta) {
            open(my $fh, ">", $META_FILE) or die("open $META_FILE: $!\n");
            print($fh $meta) or die("write $META_FILE: $!\n");
            close($fh) or die("close $META_FILE: $!\n");
        } elsif (-f $META_FILE) {
            unlink($META_FILE) or die("unlink $META_FILE: $!\n");
        }
        system("mv", $slot_dir_tmp, $slot_dir_dst) == 0 or die("mv $slot_dir_tmp $slot_dir_dst: $!\n");
        print STDERR "renamed $slot_dir_tmp to $slot_dir_dst\n";
        utime(time(), time(), $slot_dir_dst) or die("utime $slot_dir_dst: $!\n");
        """.strip()
        % {"META_FILE": META_FILE},
    ),
    # This script is launched in background on the storage host to cleanup old or
    # broken slots.
    "MAINTENANCE": textwrap.dedent(
        r"""
        use strict;
        use POSIX "setsid";
        use IPC::Open3;
        *STDOUT->autoflush(1);
        *STDERR->autoflush(1);
        my $storage_dir = $ARGV[0] or die("storage_dir argument required\n");
        my $storage_max_age_sec = $ARGV[1] or die("storage_max_age_sec argument required\n");
        my $storage_keep_hint_slots = $ARGV[2] or die("storage_keep_hint_slots argument required\n");
        length($storage_dir) >= 3 or die("storage_dir is suspiciously short\n");
        my $lock_file = "$storage_dir/maintenance.lock";
        open(my $lock, ">>", $lock_file) or die("open $lock_file: $!\n");
        if (!flock($lock, 2 | 4)) { # LOCK_EX | LOCK_NB
            print("another maintenance process is already running, so skipping\n");
            exit(0);
        }
        %(SLOT_INFOS)s
        my @slot_infos = slot_infos($storage_dir);
        my $slot_dir_newest = (map { $_->{dir} } grep { !$_->{is_tmp_or_bak} } @slot_infos)[0];
        my %%slot_dir_newest_per_hint =
            map { $_->{meta_hints}[0], $_->{dir} }
            grep { !$_->{is_tmp_or_bak} && defined($_->{meta_hints}[0]) }
            reverse(@slot_infos);
        my @rm_dirs = ();
        my $kept_per_hint_slots = 0;
        foreach my $info (@slot_infos) {
            my $dir = $info->{dir};
            my $age_sec = $info->{age_sec};
            my $is_bak = $info->{is_bak};
            my $hint = $info->{meta_hints}[0];
            my $suffix = (defined($hint) ? "hint=$hint, " : "") . "age=${age_sec}s";
            if (
                defined($slot_dir_newest) &&
                $dir eq $slot_dir_newest
            ) {
                print("keeping $dir, the newest slot overall ($suffix)\n");
                next;
            }
            if (
                defined($hint) &&
                defined($slot_dir_newest_per_hint{$hint}) &&
                $dir eq $slot_dir_newest_per_hint{$hint} &&
                $kept_per_hint_slots < $storage_keep_hint_slots
            ) {
                print("keeping $dir, the newest slot with this hint ($suffix)\n");
                $kept_per_hint_slots++;
                next;
            }
            if (
                $is_bak &&
                $age_sec > %(STORAGE_MAX_AGE_SEC_BAK)d
            ) {
                print("will remove bak $dir in background ($suffix)\n");
                push(@rm_dirs, $dir);
                next;
            }
            if ($age_sec > $storage_max_age_sec) {
                my $dir_bak = $dir . ".bak.rm" . time();
                my $dir_bak_name = ($dir_bak =~ m{([^/]+)$})[0];
                print("will rename $dir to $dir_bak_name and remove in background ($suffix)\n");
                rename($dir, $dir_bak) or die("rename $dir to $dir_bak: $!\n");
                push(@rm_dirs, $dir_bak);
                next;
            }
            print("keeping $dir, new enough ($suffix)\n");
        }
        if (!@rm_dirs) {
            unlink($lock_file);
            exit(0);
        }
        # https://linux.die.net/man/1/perlipc
        # We use open3, otherwise logger inherits our STDOUT/STDERR and doesn't let us close them.
        # To test logger in MacOS: log stream --info --predicate 'process == "logger"'
        open(my $devnull, ">", "/dev/null") or die("open /dev/null: $!\n");
        open(*STDIN, "<", "/dev/null") or die("open STDIN: $!\n");
        open3(*STDOUT, $devnull, $devnull, "logger", "-t", "ci-storage") or die("open3 STDOUT logger: $!\n");
        open(*STDERR, ">&", *STDOUT) or die("open STDERR: $!\n");
        *STDOUT->autoflush(1);
        *STDERR->autoflush(1);
        defined(my $pid = fork()) or die("fork: $!\n");
        $pid == 0 or exit(0);
        POSIX::setsid() != -1 or die("setsid: $!\n");
        foreach my $dir (@rm_dirs) {
            system("nice", "rm", "-rf", $dir) == 0 or die("rm -rf $dir: $!\n");
            print("removed $dir\n");
        }
        unlink($lock_file);
        """.strip()
        % {"SLOT_INFOS": SLOT_INFOS, "STORAGE_MAX_AGE_SEC_BAK": STORAGE_MAX_AGE_SEC_BAK}
    ),
}

#
# Script entry point.
#
if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)
    except UserException as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(
            textwrap.indent(
                f"Error: command returned status {e.returncode}."
                + (f"\n{e.stdout}" if e.stdout else "")
                + (f"\n{e.stderr}" if e.stderr else ""),
                "  ",
            ).rstrip(),
            file=sys.stderr,
        )
        sys.exit(2)
